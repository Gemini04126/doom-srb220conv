class Signpost : Actor
{
	bool firstPlayerPassed;
	TranslationID playerTranslation;
	override void Tick()
	{
		Super.Tick();
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!PlayerInGame[i])
				continue;
			let ppawn = players[i].mo;
			if (ppawn && ppawn.cursector == self.cursector)
			{
				if (!firstPlayerPassed)
				{
					firstPlayerPassed = true;
					SetStateLabel("Spin");
					A_StartSound("sfx/lvpass");
					ppawn.A_SpawnItemEx("PassedSignpost", self.pos.x-ppawn.pos.x, self.pos.y-ppawn.pos.y, self.pos.z-ppawn.pos.z, 0, 0, 0, self.angle, SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEPOSITION|SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY); // spawn a new signpost *from the player who passed this one* and transfer the translation to it, which will be invisible until this sign is done spinning
					return;
				}
				else
				{
					ppawn.A_GiveInventory("PowerInvulnerable");
				}
			}
			return;
		}
		return;
	}
	Default
	{
		Radius 8;
		Height 32;
		Mass 16;
		+NOBLOCKMAP +NOCLIP
	}
	States
	{
		Spawn:
			SIGN D -1;
			Stop;
		Spin:
			SIGN ABCFABCDABCEABCDABCGABCDABCFABCDABCEABCDABCGABCDABC 1; // spin for 51 frames
			Stop;
	}
}
class PassedSignpost : Actor // has to be made to transfer translation
{
	Default
	{
		Radius 8;
		Height 32;
		Mass 16;
		+NOBLOCKMAP +NOCLIP
	}
	States
	{
		Spawn:
			TNT1 A 51; // Wait 51 tics
			SIGN H 24;				// sign
			SIGN H -1 A_BrainDie;	// end the level
			Stop;
	}
}