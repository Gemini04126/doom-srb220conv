class YellowDiagUpSpring : SRB2SpringTemplate
{
	override void Touch(Actor toucher)
	{
		Super.Touch(toucher);
		toucher.Angle = self.Angle;
		toucher.Vel.X = cos(self.Angle) * self.Speed;
		toucher.Vel.Y = sin(self.Angle) * self.Speed;
		toucher.Vel.Z = self.Speed;
	}
	Default
	{
		Speed 20;
		Radius 16;
		Height 16;
	}
	States
	{
		Spawn:
			YSPR A -1;
			Stop;
		Touched:
			#### BCDEDCB 1;
			TNT1 A 0 {return ResolveState("Spawn");}
			Stop;
	}
}
class RedDiagUpSpring : YellowDiagUpSpring
{
	Default
	{
		Speed 32;
	}
	States
	{
		Spawn:
			RSPR A -1;
			Stop;
	}
}

class YellowDiagDownSpring : SRB2SpringTemplate
{
	override void Touch(Actor toucher)
	{
		Super.Touch(toucher);
		toucher.Angle = self.Angle;
		toucher.Vel.X = cos(self.Angle) * self.Speed;
		toucher.Vel.Y = sin(self.Angle) * self.Speed;
		toucher.Vel.Z = -self.Speed;
	}
	Default
	{
		Speed 20;
		Radius 16;
		Height 16;
		+SPAWNCEILING
		+NOGRAVITY
	}
	States
	{
		Spawn:
			YSUD A -1;
			Stop;
		Touched:
			#### BCDEDCB 1;
			TNT1 A 0 {return ResolveState("Spawn");}
			Stop;
	}
}
class RedDiagDownSpring : YellowDiagDownSpring
{
	Default
	{
		Speed 32;
	}
	States
	{
		Spawn:
			RSUD A -1;
			Stop;
	}
}

class YellowUpSpring : SRB2SpringTemplate
{
	override void Touch(Actor toucher)
	{
		Super.Touch(toucher);
		toucher.Vel.Z = self.Speed;
	}
	Default
	{
		Speed 20;
		Radius 20;
		Height 16;
	}
	States
	{
		Spawn:
			SPRY A -1;
			Stop;
		Touched:
			#### EEEEDCB 1;
			TNT1 A 0 {return ResolveState("Spawn");}
			Stop;
	}
}
class RedUpSpring : YellowUpSpring
{
	Default
	{
		Speed 32;
	}
	States
	{
		Spawn:
			SPRR A -1;
			Stop;
	}
}
class BlueUpSpring : YellowUpSpring
{
	Default
	{
		Speed 11;
	}
	States
	{
		Spawn:
			SPRB A -1;
			Stop;
	}
}

class YellowDownSpring : YellowUpSpring
{
	Default
	{
		Speed -20;
		+SPAWNCEILING
	}
	States
	{
		Spawn:
			SUDY A -1;
			Stop;
	}
}
class RedDownSpring : YellowDownSpring
{
	Default
	{
		Speed -32;
	}
	States
	{
		Spawn:
			SUDR A -1;
			Stop;
	}
}
// I guess there's no upside-down blue spring. Strange!

// Steam, from the steamed clams we're having.
// Mmm, steamed clams!
class THZSteam : Actor
{
	override void Touch(Actor toucher)
	{
		toucher.Vel.Z = self.Speed;
		if (toucher.FindState("Spring"))
			toucher.SetStateLabel("Spring");
	}
	Default
	{
		Speed 20;
		Radius 32;
		Height 1; // eugh. oh well...
		Mass 16;
		+SPECIAL
	}
	States
	{
		Spawn:
			STEM A 2 NoDelay {
				bSPECIAL = true;
				if (!(Random() % 8))
				{
					A_StartSound("sfx/steam1"); // Hiss!
				}
				else
				{
					A_StartSound("sfx/steam2");
				}
				self.vel.z++;
			}
			STEM B 2 {bSPECIAL = false;}
			STEM CDEFGH 2;
			STEM I 18;
			Loop;
	}
}